## kin simulation
baremetal machine
https://docs.google.com/spreadsheets/d/1CcRQa9WWnkY_3fmGvXb5_IsR1Ik4nWnchxgVGUCz8AA/edit?usp=sharing
usr: sol

putty.exe -ssh sol@145.40.68.91
plink -batch ssh@myserver /etc/backups/do-backup.sh
pscp local_file user@thor.cs.wmich.edu:/home/path_to_the_folder/

# use quote for env varibles
pscp wipe_ledger.sh "sol@%kin2%:/home/sol/"

// gensis commandline argument???
./multinode-demo/setup.sh solana-genesis

 "Starting validator with: ArgsOs"
 Waiting for 80% of activated stake at slot 1 to be in gossip... 

// build all solana
cargo-install-all.sh

// download build from the CI and restart on the validator service
./update edge
/home/sol/.local

// rpc nodes
gcloud compute ssh testnet-kin-rpc-bm-1 --zone=us-east1-b
gcloud compute ssh testnet-kin-rpc-bm-2 --zone=us-east1-b
boot-scripts.sh

// scping files
gcloud compute scp solana-validator testnet-kin-rpc-bm-1:/home/haoran_yi_solana_com/  
gcloud compute scp solana-validator testnet-kin-rpc-bm-2:/home/haoran_yi_solana_com/  

systemd service
// restart service
sudo systemctl daemon-reload
sudo systemctl restart sol
sudo systemctl --no-pager status sol

// config service
sudo systemctl | grep sol
sudo systemctl edit sol
sol@dev-server-ny5:~$ less /etc/systemd/system/sol.service

// check syslog for crash
sudo less /var/log/syslog

// gclound snapshot storage
https://cloud.google.com/storage/docs/gsutil_install#deb
gsutil cp gs://kin-snapshots/genesis/* .
gsutil cp gs://kin-snapshots/snapshot/snapshot-152000-4DBJcbqvTk9UaUabwrTECNPTnZc4CK7kB2pTZjT9jgVu.tar.zst .
gsutil cp gs://kin-snapshots/bin/solana-validator .

## service config file 
sol@dev-server-ny5:~$ cat /etc/systemd/system/sol.service
[Unit]
Description=Solana Validator
After=network.target
Wants=solana-sys-tuner

[Service]
Type=simple
Restart=always
RestartSec=1
User=sol
LimitNOFILE=500000
StartLimitIntervalSec=0
LogRateLimitIntervalSec=0
ExecStart=/home/sol/bin/validator.sh

[Install]
WantedBy=multi-user.target

## ledger tool command
~/solana-ledger-tool --ledger /home/sol/ledger/ create-snapshot 131030 >& 131030.log
~/solana-ledger-tool --ledger /home/sol/ledger/ verify --allow-dead-slots --accounts-db-skip-shrink --no-os-memory-stats-reporting --halt-at-slot 131040

## remove account by deactivate a feature
./src/solana/target/release/solana-ledger-tool --ledger /home/sol/ledger/ create-snapshot 574346 --remove-account capRxUrBjNkkCpjrJxPGfPaWijB7q3JoDfsWXAnt46r --hard-fork 574346

// pattern to grep
grep "bank_frozen" 131040.1.10.da11.log
grep "bank frozen" 131040.1.10.da11.log
grep "bank frozen\|without_index" 131040.1.10.da11.log
grep "bank frozen\|without_index: slot" 131040.1.10.da11.log
grep "bank frozen\|without_index: slot" 131040.kin.log
grep 131040 solana-validator-AYJDiE3wgw5eanU4qJ4qfkB8vrHVEiBMTqXLbA9hUTaW.log
grep " bank frozen: 131040 hash:" solana-validator-AYJDiE3wgw5eanU4qJ4qfkB8vrHVEiBMTqXLbA9hUTaW.log
grep "bank frozen\|without_index: slot" 131040.kin.log
grep "failed to match" solana-validator-AYJDiE3wgw5eanU4qJ4qfkB8vrHVEiBMTqXLbA9hUTaW.log


~/solana-ledger-tool --ledger ~/131039_ledger/ copy --starting-slot 131039 --ending-slot 131040 --target-db ~/ledger
~/solana-ledger-tool --ledger /home/sol/ledger/ verify --allow-dead-slots --accounts-db-skip-shrink --halt-at-slot 131040 >& 131040.after_copy.log

restart 2022/5/23:
Successfully created snapshot for slot 99273, hash 7LqrSQiZQHqaQWAoyWL86zxLCrKG1jh8vBeYwNBp3GzT: /home/sol/ledger/snapshot-99273-9XQgP53GH2bqHLvKGfAePHPAN9a1tNwYRo4s9EzoMfRw.tar.zst
Shred version: 8321

`cap_accounts_data_len` will cap the total size of accounts data to 50G. The
following patch will remove that cap.
diff --git a/runtime/src/bank.rs b/runtime/src/bank.rs
index 20585ca1dd..4ee9e4cc82 100644
--- a/runtime/src/bank.rs
+++ b/runtime/src/bank.rs
@@ -7465,7 +7465,7 @@ impl Bank {
         }

         if new_feature_activations.contains(&feature_set::cap_accounts_data_len::id()) {
-            const ACCOUNTS_DATA_LEN: u64 = 50_000_000_000;
+            const ACCOUNTS_DATA_LEN: u64 = u64::MAX;
             self.accounts_data_size_initial = ACCOUNTS_DATA_LEN;
         }

file://snapshots_backup/no_cap/snapshot-99273-9XQgP53GH2bqHLvKGfAePHPAN9a1tNwYRo4s9EzoMfRw.tar.zst
gsutil cp gs://kin-snapshots/bank-hash/snapshot-99273-9XQgP53GH2bqHLvKGfAePHPAN9a1tNwYRo4s9EzoMfRw.tar.zst .

restart 2022/5/31
total lamport mismatch
~/solana-ledger-tool --ledger /home/sol/ledger/ accounts 
~/solana-ledger-tool --ledger /home/sol/ledger/ capitalization 

syslog rotate
sol@testnet-kin-rpc-bm-2:~$ ls -l /var/log/syslog*
-rw-r----- 1 syslog adm 1680188 May 31 12:48 /var/log/syslog
-rw-r----- 1 syslog adm 3248702 May 31 00:00 /var/log/syslog.1
-rw-r----- 1 syslog adm  772941 May 30 00:00 /var/log/syslog.2.gz
-rw-r----- 1 syslog adm  642416 May 29 00:00 /var/log/syslog.3.gz
-rw-r----- 1 syslog adm  723526 May 28 00:00 /var/log/syslog.4.gz
-rw-r----- 1 syslog adm  668958 May 27 00:00 /var/log/syslog.5.gz
-rw-r----- 1 syslog adm  579668 May 26 00:00 /var/log/syslog.6.gz
-rw-r----- 1 syslog adm  540877 May 25 00:00 /var/log/syslog.7.gz

bm2 restart 2022/6/3
snapshot-1708971-5pvJvFbMKwSF3bLmgwqwTLc68AXPTEzR6ZoCRbfeCbaR.tar.zst
bank_hash: 3o6C44n9vxcb6V9R2u7sntH8KxEy5M2g1CaejZCCNhLh

bm1/bm2 restart 2022/6/5
sol@kin-validator-am6-1:~$ grep 2010782 bank_hash.txt
[2022-06-06T00:03:04.239824954Z INFO  solana_runtime::accounts_background_service] Took bank snapshot. snapshot type: Some(IncrementalSnapshot(1994201)), slot: 2010782, accounts hash: 11111111111111111111111111111111, bank hash: FJb267uzBL9G9KejcoGxX7mv2DCWgA2ALQP4HUrecHin

2022/6/14
kin resart with 6/3 snapshot and kin_jun12_2022
rm solana-validator && gsutil cp gs://kin-snapshots/bin/solana-validator.2022.6.12 solana-validator && chmod u+x 
        WAIT_FOR_SUPERMAJORITY=1708971
        EXPECTED_BANK_HASH=3o6C44n9vxcb6V9R2u7sntH8KxEy5M2g1CaejZCCNhLh


2022/6/15
dev2

26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE

ledger at epoch boundary
da11 has a ledger that contains a mnb epoch crossing +/- 200 slots:
~/src/solana/target/release/solana-ledger-tool verify --ledger /mnt/nvme1n1/ledger_rewards/
dev1    4CTAFwtdoKd8b3W3HrjV9rhm2eZz4ES2NNfrapaRBZyj    145.40.77.67    dev-server-da11

2022/7/13
- select log between 15:03 - 15:05
    // next: skip abc
    awk '/abc/{flag=1;next}/mno/{flag=0}flag' file
    // skip the end
    awk '/2022-07-13T15:03/{flag=1}/2022-07-13T15:05/{flag=0}flag' log
- print inclusive
    awk '/abc/{a=1}/mno/{print;a=0}a' file
    awk '/abc/{a=1} a; /mno/{a=0}' file


2022/7/18
==========
attach to running process
>> gdb -p PID


2022/7/29
=========
Debug and fixed a deadlock issue. What I learned:
1. use map to trace lock/unlock with file:line:thread_id
2. look for new code and walk up the stack, find that if there is any self
   locking which happens  on the call stack. This often happens on the same
   thread. It is easy and most likely to be ignored. In fact, this is actually
   where the bug is. Especially when the bug is very reproducible.
3. use PubKey for logging and grep pubkey for contentsion.
4. use try_lock/try_read/try_write when in deadlock to figure out what we are
   blocking on.

2022/8/3
=========
solana-validator, when passing `--wait-for-supermajority`,
`--expected-bank-hash`, even without `--no-snapshot-fetch`, it woun't download
remote snapshot.  To start rpc node, use `boot-scripts-fetch-snapshot.sh`.



mainnet keys
"host_id"='26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE'  #dev2
"host_id"='26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE'  #dev1
"host_id"='26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE'  #dev4
"host_id"='26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE'



from(bucket: "mainnet-beta")
  |> range(start: 2022-08-14T23:55:00Z, stop: 2022-08-15T00:01:00Z)
  |> filter(fn: (r) => r["_measurement"] == "accounts_db_store_timings")
  |> filter(fn: (r) => r["_field"] == "read_only_accounts_cache_misses" or r["_field"] == "read_only_accounts_cache_hits" or r["_field"] == "read_only_accounts_cache_evicts")
  |> filter(fn: (r) => r["host_id"] == "26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE")
  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)
  |> yield(name: "mean")

// cache entry size
from(bucket: "mainnet-beta")
  |> range(start: 2022-08-14T23:55:00Z, stop: 2022-08-15T00:01:00Z)
  |> filter(fn: (r) => r["_measurement"] == "accounts_db_store_timings")
  |> filter(fn: (r) => r["_field"] == "read_only_accounts_cache_entries")
  |> filter(fn: (r) => r["host_id"] == "26EqJ47BBf6r4fXSfPdmop4yJLuK2YZ5pbGCkM4bvMgE")
  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)
  |> yield(name: "max")

cache entry flattern around 650K, 550K

// influx exmaples
https://www.sqlpac.com/en/documents/influxdb-flux-language-advanced-features.html


2023/1/4
----------
Setup systemd service

sol@testnet-kin-accounts-client-bm-2:~$ sudo systemctl cat kin.client
# /etc/systemd/system/kin.client.service
[Unit]
Description=Kin Account Bench Client

[Service]
Type=simple
Restart=always
RestartSec=1
User=sol
WorkingDirectory=/home/sol
ExecStart=/home/sol/run-client.sh

[Install]
WantedBy=multi-user.target

401  sudo systemctl daemon-reload
408  sudo systemctl start kin.client.service
402  sudo systemctl status kin.client
411  sudo journalctl -xe

2023/1/17
----------
Increase disk space for gcloud machines
1. edit the attached disk to increase its size
2. resize the file system and partitions with the new large disk
    - gather info
        $ sudo du -Th # find size and usage for your disks
        $ sudo lsblk  # find the device names for your disks
        For example, /dev/sda is mounted to /, type is ext4 
    - resize partition
        $ sudo parted /dev/sda
        (parted) resizepart
        (Partition number) 1
        (Warning ...) Yes
        (End) 100%
        (parted) quit
    - read the new partition table
        $ sudo partprobe /dev/sda
    - extend the file system
        $ sudo resize2fs /dev/sda1
        $ sudo xfs_growfs -d /
3. verify the disk has been extended
    $ df -Th 
https://cloud.google.com/compute/docs/disks/resize-persistent-disk?hl=en-au&_ga=2.257649867.-1961129437.1646147137

2023/1/19
----------
Starting a new network fresh from genesis (kin-sim)

# create genesis
    $ target/release/solana-genesis --max-genesis-archive-unpacked-size 1073741824 --enable-warmup-epochs --bootstrap-validator /home/sol/identity/validator-identity-am6-1.json /home/sol/identity/validator-vote-account-am6-1.json /home/sol/identity/validator-stake-account-am6-1.json --bpf-program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA BPFLoader2111111111111111111111111111111111 spl_token-3.5.0.so --bpf-program Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo BPFLoader1111111111111111111111111111111111 spl_memo-1.0.0.so --bpf-program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr BPFLoader2111111111111111111111111111111111 spl_memo-3.0.0.so --bpf-program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL BPFLoader2111111111111111111111111111111111 spl_associated-token-account-1.1.2.so --bpf-program Feat1YXHhH6t1juaWF74WLcfv4XoNocjXA6sPWHNgAse BPFLoader2111111111111111111111111111111111 spl_feature-proposal-1.0.0.so --ledger /home/sol/ledger --faucet-pubkey /home/sol/identity/faucet.json --faucet-lamports 500000000000000000 --hashes-per-tick auto --cluster-type development

# start faucet
    $ ~/src/solana/target/release/solana-faucet --keypair identity/faucet.json

# bootstrap validator

# startup other validator

# start client

# use `solana` cli to monitor the network
    $ watch solana -u m block  # mainnet block
    $ solana-watchtower --validator-identity <YOUR VALIDATOR IDENTITY>

# how to interact with the network 
    1. with `solana` cli to create account, airdrop/transfer tokens 
        https://docs.solana.com/cli/transfer-tokens
    2. or with json rpc
        https://docs.solana.com/integrations/exchange
curl localhost:8899 -X POST -H "Content-Type: application/json" -d '{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "getMinimumBalanceForRentExemption",
  "params":[0]
}'

# Result
{"jsonrpc":"2.0","result":890880,"id":1}
    3. use spl-token to manage user defined token
        https://spl.solana.com/token


comments:
1. it may take a while for the non-leader nodes to download
    gensis/snapshot from bootstrap nodes.
2. incorrect program id error in client program?

# genesis and mint token

1. option 1: create genesis from google cluster (not working)
// from /net dir of solana repo/commit

    ./gce.sh create -n 3 -c 0 -p testnet-dev-kin-haoran -P --dedicated  --validator-boot-disk-size-gb 3600 --self-destruct-hours 0 -z us-east1-b --custom-machine-type "--custom-cpu 64 --min-cpu-platform Intel%20Skylake --custom-vm-type n1 --custom-memory 256GB"

    ./net.sh start --internal-nodes-stake-lamports 1000000000000 --extra-primordial-stakes 3 --faucet-lamports 500000000000000000 --slots-per-epoch 432000

# this commands works with 4 equal stakes (copied from gce cluster, don't use.  see kin_genesis_gen_with_4_staked_nodes.sh for genesis)
solana-genesis 
    --bootstrap-validator-stake-lamports 1000000000000 
    --faucet-lamports 500000000000000000 
    --slots-per-epoch 432000 
    --bootstrap-validator BStdMoTsjSzT1Qhgf52ciKMVDUwh6dnYgwYKMUat3H4s H9uTwVX2WdgauG8HoSfEC6Vh6MfUoR3Vu2FQrfXuxiDH 87ZCi24nE 6V73reyT9Uu1vniLX58FAhHBgN55pXt3aZU 
    --bootstrap-validator 9kKh4CrVSRLNijzk9KVUHg6QSsAHPKzX5aXdJ9NkWatq 5W5KkhwJp2rkJ8n8qNbs3RZFxDaDB7pKHRHGfebFDQDk E1cjeMpKengWzsQ2kDtVYECxkJHsSe51pCMzsuQxUsZt 
    --bootstrap-validator 6uzGKe3AgJgiiGqd23GVzoseyT9ovkDi4gnBchbghcUD FfMUFKEG4zM6S2rxHWbt8AHBpEZZsxQbUMSzL5BJCzQ7 Gso1FJXogYg7qEUsYQZAHLtha7g7ba6wANpmJWUU5tzB 
    --max-genesis-archive-unpacked-size 1073741824 
    --enable-warmup-epochs 
    --bootstrap-validator /home/solana/solana/net/../config/bootstrap-validator/identity.json /home/solana/solana/net/../config/bootstrap-validator/vote-account.json /home/solana/solana/net/../config/bootstrap-validator/stake-account.json 
    --bpf-program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA BPFLoader2111111111111111111111111111111111 spl_token-3.5.0.so 
    --bpf-program Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo BPFLoader1111111111111111111111111111111111 spl_memo-1.0.0.so 
    --bpf-program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr BPFLoader2111111111111111111111111111111111 spl_memo-3.0.0.so 
    --bpf-program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL BPFLoader2111111111111111111111111111111111 spl_associated-token-account-1.1.2.so 
    --bpf-program Feat1YXHhH6t1juaWF74WLcfv4XoNocjXA6sPWHNgAse BPFLoader2111111111111111111111111111111111 spl_feature-proposal-1.0.0.so 
    --ledger /home/solana/solana/net/../config/bootstrap-validator 
    --faucet-pubkey /home/solana/solana/net/../config/faucet.json 
    --hashes-per-tick auto --cluster-type development

It seems that genesis from ./net.sh is broken?
After create ledger on the bootstrap node, ledger-tool fails to extract the bank hash from snap of slot1. And can't start the cluster? Is that expected?
haoran_yi_solana_com@testnet-dev-kin-haoran-bootstrap-validator:~$  ls /home/solana/solana/config/bootstrap-validator/
accounts.ledger-tool  genesis.bin  genesis.tar.bz2  identity.json  rocksdb  snapshot-1-WiowSLurQoZrBXfmwyBb84k1mbFh3sHBLq41Anrx5t4.tar.zst  snapshot.ledger-tool  stake-account.json  vote-account.json
++ solana-ledger-tool -l config/bootstrap-validator bank-hash
[2023-01-20T02:34:52.423038671Z INFO  solana_ledger_tool] solana-ledger-tool 1.15.0 (src:devbuild; feat:2221197578)
[2023-01-20T02:34:52.423884939Z INFO  solana_ledger::blockstore] Maximum open file descriptors: 1000000
[2023-01-20T02:34:52.423901857Z INFO  solana_ledger::blockstore] Opening database at "/home/solana/solana/config/bootstrap-validator/rocksdb"
[2023-01-20T02:34:52.423913781Z INFO  solana_ledger::blockstore_db] Disabling rocksdb's automatic compactions...
[2023-01-20T02:34:52.429892189Z INFO  solana_ledger::blockstore_db] Opening Rocks with secondary (read only) access at: "/home/solana/solana/config/bootstrap-validator/rocksdb/solana-secondary"
[2023-01-20T02:34:52.429906849Z INFO  solana_ledger::blockstore_db] This secondary access could temporarily degrade other accesses, such as by solana-validator
[2023-01-20T02:34:52.446842048Z INFO  solana_ledger::blockstore] "/home/solana/solana/config/bootstrap-validator/rocksdb" open took 22ms
Unable to load bank forks at slot 0 due to disconnected blocks.
+ bankHash=
(edited)


2. use the solana-genesis command directly (this commands only have stake on one node, and that bootstrap node is always the leader so it only have tpu)
    $ target/release/solana-genesis --max-genesis-archive-unpacked-size 1073741824 --enable-warmup-epochs --bootstrap-validator /home/sol/identity/validator-identity-am6-1.json /home/sol/identity/validator-vote-account-am6-1.json /home/sol/identity/validator-stake-account-am6-1.json --bpf-program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA BPFLoader2111111111111111111111111111111111 spl_token-3.5.0.so --bpf-program Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo BPFLoader1111111111111111111111111111111111 spl_memo-1.0.0.so --bpf-program MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr BPFLoader2111111111111111111111111111111111 spl_memo-3.0.0.so --bpf-program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL BPFLoader2111111111111111111111111111111111 spl_associated-token-account-1.1.2.so --bpf-program Feat1YXHhH6t1juaWF74WLcfv4XoNocjXA6sPWHNgAse BPFLoader2111111111111111111111111111111111 spl_feature-proposal-1.0.0.so --ledger /home/sol/ledger --faucet-pubkey /home/sol/identity/faucet.json --faucet-lamports 500000000000000000 --hashes-per-tick auto --cluster-type development


3. add the mint token
I added spl-* program. I think the missing part is the token is not added.
    $sol@testnet-kin-rpc-bm-1:~$ spl-token accounts -u l
    None
So I try to use spl-token create-token to create token to mint. (edited) 
but I get the insufficent fund error.
    sol@testnet-kin-rpc-bm-1:~$ spl-token create-token -u l
    Creating token DbMmTMoucui4Hw1a3C7T9SQm6skaw3kYyFzdxEEpdCV
    Fee payer, 7JcmM6TFZMkcDkZe6RKVkGaWwN5dXciGC4fa3RxvqQc9, has insufficient balance: 0.0014716 required, 0 available

When I try to do an air drop, it fails too.

    sol@testnet-kin-rpc-bm-1:~$ solana airdrop 1 -u l
    Requesting airdrop of 1 SOL
    Error: airdrop request failed. This can happen when the rate limit is reached.


4. after spinning up the faucet process, then it works
    $ nohup ~/src/solana/target/release/solana-faucet --keypair identity/faucet.json &>faucet.log &

    $ sol@testnet-kin-rpc-bm-1:~$ solana airdrop 1 -u l
    Requesting airdrop of 1 SOL

    Signature: bqhWhRUXr5hUfYGUeHwZAbPKzeNnPoyifz8He9UJervJD6TgTK4bZ2AA995tmdgiuQFiKw6E8wWxgPDVLUgShVH

    1 SOL
    $ sol@testnet-kin-rpc-bm-1:~$ spl-token create-token -u l
    Creating token Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt

    Signature: 64B1S4BbmcVyxRPMs6NzvGZvKy5P6TRpL9gRqu6YAuKrNZDhVxJpxDttq4BzqKC2K2XJXqHmnXEWafeBDWKXTrMj
yeah. I created the token. Now kin-sim start working.

5. After create about 4M accounts, the clients starts failing again. Do airdrop 1M sol for all clients
    $ for x in accounts-cluster-id*; do ./solana-keygen pubkey $x; done > client_pubkey.txt
    $ cat client_pubkey.txt | while read line; do solana airdrop -u l 1000000 $line; done

6. more spl-token commands

sol@testnet-kin-rpc-bm-1:~$ spl-token balance Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
    Could not find token account 75hJoh8vtuXSzeKmqHLZPsdGErV66ESYwPn6pRGg8Wxt
    sol@testnet-kin-rpc-bm-1:~$ spl-token create-account Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
    Creating account 75hJoh8vtuXSzeKmqHLZPsdGErV66ESYwPn6pRGg8Wxt

    Signature: 2TtUrSgnj6sbtaSD2adqd4a9aDRA3McDbPyVsTaGrJ3574Fv5N64eFRs6B7qnnDZKcbBjFhLcjp4x5cH6qo6yDzQ

sol@testnet-kin-rpc-bm-1:~$ spl-token balance Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
    0

sol@testnet-kin-rpc-bm-1:~$ spl-token supply Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
    0

sol@testnet-kin-rpc-bm-1:~$ spl-token mint Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt 100 -u l
    Minting 100 tokens
      Token: Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt
      Recipient: 75hJoh8vtuXSzeKmqHLZPsdGErV66ESYwPn6pRGg8Wxt

    Signature: pfWoSKGQmfYmCjKtwqQiPVf1V6cNj23hv1Vq59MErytZQSU9hVEs3j8xzsAatSeHRe5uZaA8wC5TmzmNHcUAzsz

sol@testnet-kin-rpc-bm-1:~$ spl-token balance Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
100

sol@testnet-kin-rpc-bm-1:~$ spl-token supply Dx2KVx97kD95Av66EUuuiaTSrXG78zwk8zXNanzEpkPt -u l
100

